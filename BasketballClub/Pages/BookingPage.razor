@page "/Booking"
@inject DataService dataService
@inherits AuthComponentBase
<div style="margin:15px">
	<CascadingAuthenticationState>
		<AuthorizeView Roles="Standard">
			<Authorized>
				<DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
					<DxToolbarItem Click="LaunchClicked" CssClass="oi oi-plus" RenderStyle="ButtonRenderStyle.Success" BeginGroup="true" />
					@if (currentGame != null)
					{
						if (userInfo.UserName == currentGame.Host)
						{
							<DxToolbarItem CssClass="oi oi-trash" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" />
							<DxToolbarItem CssClass="oi oi-pencil" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" />
						}
						@* <DxToolbarItem CssClass="oi oi-people" RenderStyle="ButtonRenderStyle.Success" BeginGroup="true" /> *@

					}
				</DxToolbar>
			</Authorized>
			<NotAuthorized>
			</NotAuthorized>
		</AuthorizeView>
	</CascadingAuthenticationState>
</div>
<DxGrid Data="games" AllowSelectRowByClick="true" SelectedDataItemChanged="SelectedGameChanged">
	<Columns>
		<DxGridDataColumn FieldName="Place" />
		<DxGridDataColumn FieldName="StartTime" DisplayFormat="f" />
		<DxGridDataColumn FieldName="EndTine" DisplayFormat="f" />
		<DxGridDataColumn FieldName="Host" />
		<DxGridDataColumn FieldName="Id" Caption="Detail">
			<CellDisplayTemplate>
				<div style="text-align:center">
					<DxButton Click="(async ()=>{await GetGameDetail(context.Value.ToString());})" RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Text" CssClass="oi oi-people"></DxButton>
				</div>
			</CellDisplayTemplate>
		</DxGridDataColumn>
	</Columns>
</DxGrid>

<DxPopup @bind-Visible="launchDialogueVisible" HeaderText="Launch New Game" ShowFooter="true" CloseOnOutsideClick="false" Context="launchPop_context">
	<BodyContentTemplate>
		<DxFormLayout>
			<DxFormLayoutItem Caption="Court" ColSpanLg="12">
				<DxComboBox Data="courts" @bind-Value="currentCourt" EditFormat="{0}({1})">
					<Columns>
						<DxListEditorColumn FieldName="CourtName" />
						<DxListEditorColumn FieldName="NickName" />
					</Columns>
				</DxComboBox>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="Host" ColSpanLg="12">
				<DxDateEdit @bind-Date="startTime" MinDate="DateTime.Now" TimeSectionVisible="true"></DxDateEdit>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="Start Time" ColSpanLg="12">
				<DxDateEdit @bind-Date="endTime" MinDate="startTime" TimeSectionVisible="true"></DxDateEdit>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="End Time" ColSpanLg="12">
				<DxTextBox Text="@userInfo.UserName" ReadOnly="true"></DxTextBox>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="Amount" ColSpanLg="12">
				<DxSpinEdit @bind-Value="amount" MinValue="1"></DxSpinEdit>
			</DxFormLayoutItem>
		</DxFormLayout>
	</BodyContentTemplate>
	<FooterContentTemplate>
		<DxButton Text="Launch" RenderStyle="ButtonRenderStyle.Success" Click="ConfirmLaunch"></DxButton>
	</FooterContentTemplate>
</DxPopup>
<DxPopup @bind-Visible="detailDialogueVisible" ShowFooter="true"  HeaderText="Participants Detail" CloseOnOutsideClick="false" Context="detailPop_context">
	<BodyContentTemplate>
		<DxGridLayout>
			<Rows>
				<DxGridLayoutRow  />
				<DxGridLayoutRow />
			</Rows>
			<Columns>
				<DxGridLayoutColumn Width="10%" />
				<DxGridLayoutColumn Width="45%" />
				<DxGridLayoutColumn Width="45%" />
			</Columns>
			<Items>
				<DxGridLayoutItem Row="0" Column="0" ColumnSpan="3">
					<Template>
							<DxGrid Data="gameParticipants">
								<Columns>
									<DxGridDataColumn FieldName="ParticipantName" Caption=" " Width="10%">
										<CellDisplayTemplate>
											<div style="text-align:center">
												@if (context.Value.ToString() == currentGame.Host)
												{
													<DxButton RenderStyle="ButtonRenderStyle.None" RenderStyleMode="ButtonRenderStyleMode.Text" CssClass="oi oi-flag" Enabled="false"></DxButton>
												}
											</div>
										</CellDisplayTemplate>
									</DxGridDataColumn>
									<DxGridDataColumn FieldName="ParticipantName" />
									<DxGridDataColumn FieldName="Amount" />
								</Columns>
							</DxGrid>
					</Template>
				</DxGridLayoutItem>
				<DxGridLayoutItem Row="1" Column="0">
					<Template>
						@if (currentgameParticipant.ParticipantName == currentGame.Host)
							{
							<DxButton RenderStyle="ButtonRenderStyle.None" RenderStyleMode="ButtonRenderStyleMode.Text" CssClass="oi oi-flag" Enabled="false"></DxButton>
							}
					</Template>
				</DxGridLayoutItem>
				<DxGridLayoutItem Row="1" Column="1">
					<Template>
						<DxTextBox @bind-Text="@currentgameParticipant.ParticipantName" ReadOnly="true"></DxTextBox>
					</Template>
				</DxGridLayoutItem>
				<DxGridLayoutItem Row="1" Column="2">
					<Template>
						<DxSpinEdit @bind-Value="@currentgameParticipant.Amount" MinValue="0"></DxSpinEdit>
					</Template>
				</DxGridLayoutItem>
			</Items>
		</DxGridLayout>
	</BodyContentTemplate>
	<FooterContentTemplate>
		<DxButton Text="@joinType" RenderStyle="ButtonRenderStyle.Success" Click="UpdateGameDetail"></DxButton>
	</FooterContentTemplate>
</DxPopup>
@code {
	private bool launchDialogueVisible = false;
	private IEnumerable<Game> games;
	private Game currentGame;
	private IEnumerable<Court> courts;
	private Court currentCourt;

	private DateTime startTime;
	private DateTime endTime;
	private int amount;



	private bool detailDialogueVisible = false;
	List<GameParticipant> gameParticipants;
	GameParticipant currentgameParticipant;
	private string joinType;


	protected override async Task OnInitializedAsync()
	{
		games = await dataService.GetAllGames();
		dataService.GameUpdateAct += GetGamesUpdate;
	}

	private void GetGamesUpdate(List<Game> newGames)
	{
		games = newGames;
		StateHasChanged();
	}

	private async Task LaunchClicked()
	{
		courts = await dataService.GetAllCourts();
		currentCourt = courts.FirstOrDefault();
		launchDialogueVisible = true;
		startTime = DateTime.Now;
		endTime = DateTime.Now;
	}

	private async Task ConfirmLaunch()
	{
		Game newGame = new Game
			{
				Id = Guid.NewGuid().ToString(),
				Host = userInfo.UserName,
				Place = currentCourt.CourtName,
				StartTime = startTime,
				EndTine = endTime,
			};
		await dataService.AddNewGame(newGame);
		GameParticipant gameParticipant = new GameParticipant
			{
				Id = newGame.Id,
				ParticipantName = newGame.Host,
				Amount = amount
			};
		await dataService.JoinGame(gameParticipant);
		launchDialogueVisible = false;
	}

	private void SelectedGameChanged(object game)
	{
		currentGame = game as Game;
	}

	private async Task GetGameDetail(string gameId)
	{
		//Game target = await dataService.GetGameByID(gameId);
		IEnumerable<GameParticipant> tmp = await dataService.GetParticipantsByGameID(gameId);
		gameParticipants = tmp.Where(x => x.ParticipantName != userInfo.UserName).ToList();
		bool inGame = tmp.Any(x => x.ParticipantName == userInfo.UserName);
		if (inGame)
		{
			currentgameParticipant = tmp.FirstOrDefault(x => x.ParticipantName == userInfo.UserName);
			joinType = "modify";
		}
		else
		{
			currentgameParticipant = new GameParticipant
				{
					Id = currentGame.Id,
					ParticipantName = userInfo.UserName,
					Amount = 0,
				};
			joinType = "join";
		}

		detailDialogueVisible = true;
	}
	private async Task UpdateGameDetail()
	{
		if (currentgameParticipant.Amount > 0)
		{
			await dataService.JoinGame(currentgameParticipant);
		}
		else
		{
			await dataService.LeaveGame(currentgameParticipant);
		}
		detailDialogueVisible = false;
	}
}
